{$assertions on}

begin
  Assert(not UInt8(1)    = High(UInt8) - 1, 'not 1 <> high-1');
  Assert(not High(UInt8) = 0,               'not high <> 0');

  Assert(1 and 1 = 1, '1 and 1');
  Assert(1 and 2 = 0, '1 and 2');
  Assert(1 and 3 = 1, '1 and 3');

  Assert(1 or 1 = 1, '1 or 1');
  Assert(1 or 2 = 3, '1 or 2');
  Assert(1 or 3 = 3, '1 or 3');

  Assert(1 xor 1 = 0, '1 xor 1');
  Assert(1 xor 2 = 3, '1 xor 2');
  Assert(1 xor 3 = 2, '1 xor 3');

  Assert(3 shl 1 = 3 * 2, '3 shl 1');
  Assert(3 shl 2 = 3 * 4, '3 shl 2');

  Assert(20 shr 1 = 20 div 2, '20 shr 1');
  Assert(20 shr 2 = 20 div 4, '20 shr 2');

  WriteLn('Integer :: Passed');

  Assert(not True  = False, 'not True');
  Assert(not False = True,  'not False');

  Assert(True  and True  = True,  'True and True');
  Assert(True  and False = False, 'True and False');
  Assert(False and False = False, 'True and False');

  Assert(True  or True  = True,  'True or True');
  Assert(True  or False = True,  'True or False');
  Assert(False or False = False, 'True or False');

  Assert(True  xor True  = False, 'True xor True');
  Assert(True  xor False = True,  'True xor False');
  Assert(False xor False = False, 'True xor False');

  WriteLn('Boolean :: Passed');
end;


