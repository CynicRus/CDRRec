// Author: Benjamin Land (https://github.com/BenLand100/CPascal)
// Adjusted to compile with Lape.

const
  Easy = False;

  xGridLo = 0;
  xGridHi = 25;
  yGridLo = 0;
  yGridHi = 12;

  sMap =
    '00000000000000000000000002' +
    '03011111011111100010001102' +
    '01010101010000111111101002' +
    '01111101010110101000101002' +
    '01000111010100101110111112' +
    '01010100010110100000100012' +
    '01110111010011101100101012' +
    '00101101010110001011101012' +
    '01111001010100101010011012' +
    '01001011110111111110010012' +
    '01111010010000000111110012' +
    '00100111111111111000000042' +
    '0000000000000000000000000';

type
  TPoint = record x, y: Integer; end;
  TGrid = array[xGridLo..xGridHi] of array[yGridLo..yGridHi] of Boolean;
  TPointArray = array of TPoint;
  T2DPointArray = array of TPointArray;

function GetPossibles(s, e: TPoint; var Grid: TGrid): TPointArray;
var
  l: Integer;
  BxLo, BxHi, ByLo, ByHi,
  dL, dR, dU, dD: Boolean;
begin
  SetLength(Result, 0);
  if (s.x = e.x) and (s.y = e.y) then
    Exit;

  SetLength(Result, 4);
  l := 0;

  BxLo := s.x > xGridLo;
  BxHi := s.x < xGridHi;
  ByLo := s.y > yGridLo;
  ByHi := s.y < yGridHi;
  if BxLo then
    dL := Grid[s.x - 1][s.y];
  if BxHi then
    dR := Grid[s.x + 1][s.y];
  if ByLo then
    dU := Grid[s.x][s.y - 1];
  if ByHi then
    dD := Grid[s.x][s.y + 1];

  if dU then
  begin
    Grid[s.x][s.y - 1] := False;
    Result[l] := [s.x, s.y - 1];
    Inc(l);
  end;
  if dD then
  begin
    Grid[s.x][s.y + 1] := False;
    Result[l] := [s.x, s.y + 1];
    Inc(l);
  end;

  if dL then
  begin
    Grid[s.x - 1][s.y] := False;
    Result[l] := [s.x - 1, s.y];
    Inc(l);
  end;
  if dR then
  begin
    Grid[s.x + 1][s.y] := False;
    Result[l] := [s.x + 1, s.y];
    Inc(l);
  end;

  if (l <> 4) then
    SetLength(Result, l);
end;

type
  TNode = record
    Path, Possibles: TPointArray;
    PosLen: Integer;
    Grid: TGrid;
  end;
  TNodeArray = array of TNode;

function Node(const aPath, aPossibles: TPointArray; const aGrid: TGrid): TNode;
begin
  with Result do
  begin
    Path := aPath;
    Possibles := aPossibles;
    PosLen := Length(aPossibles);
    Grid := aGrid;
  end;
end;

procedure AddNodeToArray(var a: TNodeArray; n: TNode);
begin
  SetLength(a, Length(a) + 1);
  a[High(a)] := n;
end;

procedure AddPointToArrayProc(var a: TPointArray; p: TPoint);
begin
  SetLength(a, Length(a) + 1);
  a[High(a)] := p;
end;

function AddPointToArrayFunc(const a: TPointArray; p: TPoint): TPointArray;
begin
  Result := a;
  AddPointToArrayProc(Result, p);
end;

function GetPaths(s, e: TPoint; Grid: TGrid): T2DPointArray;
var
  tp: TPoint;
  p, xxx: TPointArray;
  i, c, x, Len: Integer;
  Nodes: TNodeArray;
begin
  SetLength(Result, 0);
  p := GetPossibles(s, e, Grid);
  
  SetLength(xxx, 1);
  xxx[0] := s;
  AddNodeToArray(Nodes, Node(xxx, p, Grid));
  
  c := 0;
  Len := 0;
  while (c < Length(Nodes)) do
  begin
    for i := 0 to Nodes[c].PosLen - 1 do
    begin
      if (Nodes[c].Possibles[i].x = e.y) and
         (Nodes[c].Possibles[i].y = e.x) then
      begin
        SetLength(Result, Len + 1);
        Result[Len] := AddPointToArrayFunc(Nodes[c].Path, Nodes[c].Possibles[i]);
        Inc(Len);
        Break;
      end;

      p := GetPossibles(Nodes[c].Possibles[i], e, Nodes[c].Grid);
      x := Length(p);
      if (x = 1) and (Nodes[c].PosLen = 1) then
      begin
        AddPointToArrayProc(Nodes[c].Path, Nodes[c].Possibles[i]);
        repeat
          tp := p[0];
          if (tp.y = e.y) and (tp.x = e.x) then
          begin
            SetLength(Result, Len + 1);
            Result[Len] := AddPointToArrayFunc(Nodes[c].Path, tp);
            Inc(Len);
            x := -123;
            Break;
          end;
          p := GetPossibles(tp, e, Nodes[c].Grid);
          x := Length(p);
          if (x = 1) then
            AddPointToArrayProc(Nodes[c].Path, tp);
        until (x <> 1);

        if (x = -123) then
          Continue;
      end
      else
        tp := Nodes[c].Possibles[i];

      if (x > 0) then
        AddNodeToArray(Nodes, Node(AddPointToArrayFunc(Nodes[c].Path, tp), p, Nodes[c].Grid));
    end;
    Inc(c);
  end;
end;

procedure LoadMap(sMap: string; var Grid: TGrid; out sp, ep: TPoint);
var
  x, y, t: Integer;
begin
  x := -1;
  y := 0;
  t := 1;

  for t := 1 to Length(sMap) do
  begin
    case sMap[t] of
      '0', '1', '3', '4':
        begin
          Inc(x);
          if (sMap[t] = '0') then
            Grid[x][y] := False
          else
          begin
            Grid[x][y] := True;
            case sMap[t] of
              '3': sp := [x, y];
              '4': ep := [x, y];
            end;
          end;
        end;
      '2':
        begin
          Inc(y);
          x := -1;
        end;
    end;
  end;
end;

var
  g: TGrid;
  y, w, h: Integer;
  p: T2DPointArray;
  sp, ep, pt: TPoint;
begin
  LoadMap(sMap, g, sp, ep);
  WriteLn(Length(GetPaths(sp, ep, g)));
end.