{$assertions on}

type
  TFunc1 = function: Boolean;
  TFunc2 = function: TFunc1;

function Func1: Boolean;
begin
  Result := True;
end;

function Func2: TFunc1;
begin
  Result := @Func1;
end;

var
  f: function: Boolean;
begin
  {$autoinvoke off}
  f := nil;
  Assert(f = nil, 'f <> nil');
  Assert((f = nil) or f(), 'not f');

  f := Func1;
  Assert(f = Func1, 'f <> Func1');
  Assert(f(), 'Func1');
  Assert((f <> nil) and f(), 'not Func1');

  Assert(Pointer(Func2) <> Pointer(f), 'Func2 = f');
  Assert(Func2() = f, 'Func2() <> f');
  Assert(Func2()() = True, 'Func2()()');

  WriteLn('Autoinvoke off :: Passed');

  {$autoinvoke on}
  f := nil;
  Assert(@f = nil, 'f <> nil');
  Assert((@f = nil) or f, 'not f');

  f := @Func1;
  Assert(@f = @Func1, 'f <> Func1');
  Assert(f, 'Func1');
  Assert((@f <> nil) and f, 'not Func1');

  @f := @Func1;
  Assert(@f = @Func1, 'f <> Func1');
  Assert(f and f(), 'Func1');
  Assert((@f <> nil) and f() and f, 'not Func1');

  Assert(Pointer(@Func2) <> Pointer(@f), 'Func2 = f');
  Assert(Func2 = @f, 'Func2 <> f');
  Assert(Func2() = @f, 'Func2() <> f');
  Assert(Func2()() = True, 'Func2()()');

  WriteLn('Autoinvoke on  :: Passed');
end;
